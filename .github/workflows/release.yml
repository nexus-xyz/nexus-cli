name: Release

on:
  push:
    tags:
      - "v*"            # Trigger on tag push (e.g. "v1.0.0"). Adjust pattern as needed.
  workflow_dispatch: # Allow manual triggering of the workflow.
    inputs:
      create_release:
        description: 'Create a GitHub release from the latest tag'
        required: true
        type: boolean
        default: false


env:
  # Set the default Rust toolchain to use for all jobs
  RUSTUP_TOOLCHAIN: nightly-2025-04-06

jobs:
  build-docker:
    name: Build and Push Docker Image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: clients/cli
          file: clients/cli/Dockerfile  # Optional. Explicitly specify the Dockerfile path
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            nexusxyz/nexus-cli:latest
            nexusxyz/nexus-cli:${{ github.sha }}
            nexusxyz/nexus-cli:${{ github.ref_name }}

  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: Linux (x86_64)
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: nexus-network-linux-x86_64
            rustflags: "-C target-feature=+crt-static"
            build_command: cargo build --release --target x86_64-unknown-linux-gnu
            linker: ""
            mold: true
          - platform: Linux (ARM64)
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: nexus-network-linux-arm64
            rustflags: "-C target-feature=+crt-static"
            build_command: |
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              cargo build -Zbuild-std=std,panic_abort --release --target aarch64-unknown-linux-gnu
            linker: "aarch64-linux-gnu-gcc"
            mold: true
          - platform: macOS (x86_64)
            runner: macos-latest
            target: x86_64-apple-darwin
            binary_name: nexus-network-macos-x86_64
            rustflags: "-C target-feature=+sse4.2,+avx,+avx2"
            build_command: cargo +nightly-2025-04-06 build --release --target=x86_64-apple-darwin -Z build-std=std,panic_abort
            linker: ""
            mold: true
          - platform: macOS (ARM64)
            runner: macos-latest
            target: aarch64-apple-darwin
            binary_name: nexus-network-macos-arm64
            rustflags: "-C target-feature=+neon,+fp-armv8,+crc"
            build_command: cargo build --release --target=aarch64-apple-darwin
            linker: ""
            mold: true
          - platform: Windows (x86_64)
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: nexus-network-windows-x86_64.exe
            rustflags: "-C target-feature=+sse4.2,+avx,+avx2"
            build_command: cargo build --release --target=x86_64-pc-windows-msvc
            linker: ""
            mold: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check system resources
        run: |
          echo "Available memory:"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            free -h
            echo "Total memory: $(free -m | awk 'NR==2{print $2}') MB"
            echo "Available memory: $(free -m | awk 'NR==2{print $7}') MB"
            if [ $(free -m | awk 'NR==2{print $2}') -lt 4096 ]; then
              echo "WARNING: Less than 4GB total memory available"
            fi
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            vm_stat | head -4
            echo "Total memory: $(sysctl -n hw.memsize | awk '{print int($1/1024/1024)}') MB"
            echo "Available memory: $(vm_stat | awk '/free/ {gsub(/\./, "", $3); print $3*4096/1024/1024}' | head -1) MB"
            if [ $(sysctl -n hw.memsize | awk '{print int($1/1024/1024)}') -lt 4096 ]; then
              echo "WARNING: Less than 4GB total memory available"
            fi
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            wmic computersystem get TotalPhysicalMemory | tail -1 | awk '{print int($1/1024/1024)}' | xargs -I {} echo "Total memory: {} MB"
            echo "Available memory: $(wmic OS get FreePhysicalMemory | tail -1 | awk '{print int($1/1024)}') MB"
            if [ $(wmic computersystem get TotalPhysicalMemory | tail -1 | awk '{print int($1/1024/1024)}') -lt 4096 ]; then
              echo "WARNING: Less than 4GB total memory available"
            fi
          fi

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "clients/cli"
          cache-all-crates: "true"
          cache-on-failure: "true"
          key: ${{ matrix.platform }}

      - name: Install & Use `mold`
        if: matrix.mold
        uses: rui314/setup-mold@v1

      # Set up the Rust toolchain for the specified target(s)
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}
          targets: ${{ matrix.target }}
          components: rustfmt, rust-src

      # Install the required targets for cross-compilation
      - name: Ensure targets are installed (fallback)
        run: |
          rustup target add ${{ matrix.target }}
          rustup component add rust-src --toolchain ${{ env.RUSTUP_TOOLCHAIN }}

      # Install ARM64 Linux linker if needed
      - name: Install ARM64 Linux linker
        if: matrix.linker != ''
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Debug Rust environment
        run: |
          echo "Rust version: $(rustc --version --verbose)"
          echo "Cargo version: $(cargo --version)"
          echo "Rustup installed targets: $(rustup target list --installed | tr '\n' ',' | sed 's/,$//')"
          echo "Rustup active toolchain: $(rustup show active-toolchain)"
          echo "Host target: $(rustc -vV | grep host)"

      # Build the release binary for the specified target
      - name: Build CLI binary
        working-directory: clients/cli
        run: ${{ matrix.build_command }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.linker }}

      # Rename the binary to indicate the target OS
      - name: Rename binary
        working-directory: clients/cli/target/${{ matrix.target }}/release/
        run: cp nexus-network ${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }} ${{ matrix.binary_name }}

      - name: Integration Test
        working-directory: clients/cli
        timeout-minutes: 5
        run: |
          if [ -n "${{ secrets.SMOKE_TEST_NODE_IDS }}" ]; then
            echo "Running integration test with secret node IDs"
            SMOKE_TEST_NODE_IDS="${{ secrets.SMOKE_TEST_NODE_IDS }}" ../../tests/integration_test.sh ./target/${{ matrix.target }}/release/${{ matrix.binary_name }} --max-tasks 1
          else
            echo "Running integration test with fallback node IDs"
            ../../tests/integration_test.sh ./target/${{ matrix.target }}/release/${{ matrix.binary_name }} --max-tasks 1
          fi

      # Upload the binary as an artifact (only if smoke test passes)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: clients/cli/target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: [ build ]
    if: github.event.inputs.create_release == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List downloaded artifacts (debug)
        run: ls -lh artifacts/

      - name: Generate individual .sha256 files
        run: |
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" | awk '{print $1}' > "$file.sha256"
            fi
          done
          ls -lh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/nexus-network-macos-arm64
            artifacts/nexus-network-macos-arm64.sha256
            artifacts/nexus-network-macos-x86_64
            artifacts/nexus-network-macos-x86_64.sha256
            artifacts/nexus-network-linux-arm64
            artifacts/nexus-network-linux-arm64.sha256
            artifacts/nexus-network-linux-x86_64
            artifacts/nexus-network-linux-x86_64.sha256
            artifacts/nexus-network-windows-x86_64.exe
            artifacts/nexus-network-windows-x86_64.exe.sha256
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
