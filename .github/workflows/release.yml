name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release from the latest tag'
        required: true
        type: boolean
        default: false
      docker_build:
        description: 'Build Docker image (no push)'
        required: true
        type: boolean
        default: false
      docker_push:
        description: 'Push Docker image to Docker Hub (only effective on refs/heads/main)'
        required: true
        type: boolean
        default: false

env:
  RUSTUP_TOOLCHAIN: nightly-2025-04-06

jobs:
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: (github.event_name == 'push' || github.event.inputs.docker_push == 'true') && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image (no push)
        if: github.event_name != 'push' && github.event.inputs.docker_build == 'true' && github.event.inputs.docker_push != 'true'
        uses: docker/build-push-action@v6
        with:
          context: clients/cli
          file: clients/cli/Dockerfile
          push: false
          platforms: linux/amd64,linux/arm64
      - name: Build and push Docker image
        if: (github.event_name == 'push' || github.event.inputs.docker_push == 'true') && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: clients/cli
          file: clients/cli/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            nexusxyz/nexus-cli:latest
            nexusxyz/nexus-cli:${{ github.sha }}

  build:
    name: Build ${{ matrix.id }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build_cmd: cargo build --release --target x86_64-unknown-linux-gnu
            rename_from: clients/cli/target/x86_64-unknown-linux-gnu/release/nexus-network
            rename_to: clients/cli/target/x86_64-unknown-linux-gnu/release/nexus-network-linux-x86_64
            rustflags: "-C target-feature=+crt-static"
          - id: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build_cmd: cargo build --release --target aarch64-unknown-linux-gnu
            rename_from: clients/cli/target/aarch64-unknown-linux-gnu/release/nexus-network
            rename_to: clients/cli/target/aarch64-unknown-linux-gnu/release/nexus-network-linux-arm64
            rustflags: ""
          - id: macos-x86_64
            os: macos-13
            target: x86_64-apple-darwin
            build_cmd: cargo +nightly-2025-04-06 build --release --target=x86_64-apple-darwin -Z build-std=std,panic_abort
            rename_from: clients/cli/target/x86_64-apple-darwin/release/nexus-network
            rename_to: clients/cli/target/x86_64-apple-darwin/release/nexus-network-macos-x86_64
            rustflags: "-C target-feature=+sse4.2,+avx,+avx2"
            use_nightly: true
          - id: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            build_cmd: cargo build --release --target=aarch64-apple-darwin
            rename_from: clients/cli/target/aarch64-apple-darwin/release/nexus-network
            rename_to: clients/cli/target/aarch64-apple-darwin/release/nexus-network-macos-arm64
            rustflags: "-C target-feature=+neon,+fp-armv8,+crc"
          - id: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            build_cmd: cargo build --release --target=x86_64-pc-windows-msvc
            rename_from: clients/cli/target/x86_64-pc-windows-msvc/release/nexus-network.exe
            rename_to: clients/cli/target/x86_64-pc-windows-msvc/release/nexus-network-windows-x86_64.exe
            rustflags: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "clients/cli -> target"
          cache-all-crates: "true"
          cache-on-failure: "true"
          key: ${{ matrix.id }}

      - name: Install & Use `mold`
        if: startsWith(matrix.id, 'linux-')
        uses: rui314/setup-mold@v1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}
          targets: ${{ matrix.target }}
          components: rustfmt, rust-src

      - name: Install cross linker for aarch64
        if: matrix.id == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-linker env
        if: matrix.id == 'linux-arm64'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Debug Rust environment
        run: |
          echo "Rust version: $(rustc --version --verbose)"
          echo "Cargo version: $(cargo --version)"
          echo "Rustup installed targets: $(rustup target list --installed | tr '\n' ',' | sed 's/,$//')"
          echo "Rustup active toolchain: $(rustup show active-toolchain)"
          echo "Host target: $(rustc -vV | grep host)"

      - name: Build CLI
        working-directory: clients/cli
        run: ${{ matrix.build_cmd }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
          RUSTC_BOOTSTRAP: ${{ matrix.use_nightly && '1' || '' }}

      - name: Rename binary
        run: cp "${{ matrix.rename_from }}" "${{ matrix.rename_to }}"

      - name: Integration Tests
        if: matrix.id != 'linux-arm64'
        shell: bash
        working-directory: clients/cli
        timeout-minutes: 5
        run: |
          ROOT_UNIX=$(echo "$GITHUB_WORKSPACE" | tr '\\' '/')
          echo "Host triple: $(rustc -vV | awk '/host/ {print $2}')"
          echo "Built binaries:"
          find target -maxdepth 3 -type f -name 'nexus-network*' -print || true
          if [ "${{ matrix.id }}" = "windows-x86_64" ]; then
            echo "System memory info (Windows)"
            wmic computersystem get TotalPhysicalMemory | findstr /r /v "^$" || true
            wmic OS get FreePhysicalMemory | findstr /r /v "^$" || true
            export RUST_BACKTRACE=1
          fi
          if [ -n "${{ secrets.INTEGRATION_TEST_NODE_IDS }}" ]; then
            echo "Running integration tests with configured node IDs"
            INTEGRATION_TEST_NODE_IDS="${{ secrets.INTEGRATION_TEST_NODE_IDS }}" bash "$ROOT_UNIX/scripts/run_integration_tests.sh"
          else
            echo "Running integration tests with fallback node IDs"
            bash "$ROOT_UNIX/scripts/run_integration_tests.sh"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexus-network-${{ matrix.id }}
          path: ${{ matrix.rename_to }}

  release:
    name: Create Release
    needs: [ build ]
    if: github.event.inputs.create_release == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: List downloaded artifacts (debug)
        run: ls -lh artifacts/
      - name: Generate individual .sha256 files
        run: |
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" | awk '{print $1}' > "$file.sha256"
            fi
          done
          ls -lh
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
